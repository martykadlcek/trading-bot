{
  "_id": "_design/control",
  "language": "javascript",
  "views": {
    "lib": {
      "base64": "exports.btoa = function(string) {\n        var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n        var bitmap, a, b, c,\n            result = \"\", i = 0,\n            rest = string.length % 3; \n\n        for (; i < string.length;) {\n            if ((a = string.charCodeAt(i++)) > 255\n                    || (b = string.charCodeAt(i++)) > 255\n                    || (c = string.charCodeAt(i++)) > 255)\n                throw new TypeError(\"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\");\n\n            bitmap = (a << 16) | (b << 8) | c;\n            result += b64.charAt(bitmap >> 18 & 63) + b64.charAt(bitmap >> 12 & 63)\n                    + b64.charAt(bitmap >> 6 & 63) + b64.charAt(bitmap & 63);\n        }\n\n        return rest ? result.slice(0, rest - 3) : result;\n    };\n",
      "hex": "exports.hexToBase64 = function(str) {\n  var btoa = require(\"views/lib/base64\").btoa;\n  return btoa(String.fromCharCode.apply(null,\n    str.replace(/\\r|\\n/g, \"\").replace(/([\\da-fA-F]{2}) ?/g, \"0x$1 \").replace(/ +$/, \"\").split(\" \"))\n  );\n}\n"
    },
    "test": {
      "map": "function (doc) {\n  emit(doc._id, 1);\n}"
    },
    "stats": {
      "map": "function (doc) {\n  var t = ((doc.time/86400000)|0);\n  if (doc._id.substr(0,6)==\"trade.\") {\n   if (doc.change) emit([doc.ident,t,doc.currency],doc.change);\n   if (doc.btc) emit([doc.ident,t,\"_b\"],doc.btc);\n   if (doc.fees) emit([doc.ident,t,\"_f\"],doc.fees);\n  } else if (doc._id.substr(0,8)==\"deposit.\") {\n    emit([doc.ident,t,\"_f\"],doc.change);\n    emit([doc.ident,t,\"_d\"],doc.change);\n  }\n}",
      "reduce": "_sum"
    }
  },
  "updates": {
    "sendItem": "function(doc, req) {\n    var hexToBase64 = require(\"views/lib/hex\").hexToBase64;\n    var uid = \"trade.\"+hexToBase64(req.uuid);\n    var data = JSON.parse(req.body);\n    data._id = uid;\n    if (doc && doc.rates && data.change) {\n        var cur = data.currency.toUpperCase();\n        var rate = doc.rates[cur];\n        if (rate) {\n            data.btc = data.change*rate;\n            if (doc.fees) {\n                var fees = doc.fees.general;\n                var specfees = doc.fees.idents && doc.fees.idents[data.ident];\n                if (specfees !== undefined) fees = specfees;\n                data.fees = -data.btc*fees;\n            }\n        }\n    }\n        \n    return [data, data._id];\n}\n",
    "updateRates": "function(doc, req) {\n    if (doc == null) {\n        doc = {\"_id\":req.id, \"rates\":{}};\n    }\n    var data = JSON.parse(req.body);\n    var c = data[\"crypto\"];\n    var f = data[\"forex\"];\n    if (c) {\n        var r = c.result;\n        r = r.rows;\n        r.forEach(function(x) {\n            var s = x.symbol.toUpperCase();\n            doc.rates[s] = parseFloat(x.price);\n        });\n        doc.rates[\"USD\"] = doc.rates[\"USDT\"];\n    }\n    var usdrate = doc.rates[\"USD\"];\n    if (f) {\n        for (var k in f) {\n            var x = f[k];\n            if (x.type == \"Forex\") {\n                var a = x.marginCurrency;\n                var c = x.priceCurrency;\n                var r = (x.quote.a + x.quote.b)*0.5;\n                if (c == \"USD\" && c != a) {\n                    doc.rates[a] = r * usdrate;\n                } else if (a == \"USD\" && c != a) {\n                    doc.rates[c] = usdrate/r;\n                }\n            }\n        }\n    }\n    if (doc.fees === undefined) {\n        doc.fees = {\n            \"general\":0.15,\n            \"idents\": {},\n        }\n    }\n    return [doc,\"ok\"];\n}"
  },
  "lists": {
    "report": "function(hdr,req) {\n    var static = {\n        \"hdr\":[\"Date\",\"Test\"],\n        \"rows\":[[0,1234]],\n        \"sums\":[3232],\n        \"avg\":[111]\n        };\n    \n    \n    start({\n        'headers': {\n            'Content-Type': 'application/json'\n        }\n    });\n    \n    var alldata = [];\n    var cr = {};\n    var rd = 0;\n    \n    var sums = {};\n    var fee = 0.15;\n    \n    while (r=getRow()) {\n        var t = r.key[1];\n        var s = r.key[2];\n        var v = r.value;\n        if (t != rd) {\n            if (rd) alldata.push(cr);\n            cr = {Date: t*86400};\n            rd = t;\n        }\n        cr[s] = v;\n        if (sums[s]) sums[s]+=v; else sums[s]=v;\n    }\n    if (rd) alldata.push(cr);\n    \n    var hdrs = Object.keys(sums).sort(function(a,b) {\n        if (a[0] == '_' && b[0] != '_') return 1;\n        if (a[0] != '_' && b[9] == '_') return -1;\n        else return a.localeCompare(b);\n    });\n    var osums = hdrs.map(function(x) {return sums[x]?sums[x]:0;});\n    hdrs.unshift(\"Date\");\n    var orows = alldata.map(function(a) {\n        return  hdrs.map(function(x) {return a[x]?a[x]:0;});\n    \n    });\n    \n    hdrs = hdrs.map(function(z) {\n        switch(z) {\n            case '_b': return \"∑BTC\";\n            case '_f': return \"±Fee\";\n            case '_d': return \"Deposit\";\n            default: return z;\n        }\n    });\n    \n    var result = {\n        hdr: hdrs,\n        rows: orows,\n        sums: osums\n    };\n    \n    send(JSON.stringify(result));\n\n}"
  }
}